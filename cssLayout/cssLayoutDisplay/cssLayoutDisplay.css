/* 
  BASICS 
*/

:root {
  --background-color: #00529f84;
  --h1-text-shadow-color: #555;
  --h1-after-background-color: paleturquoise;
  --h2-text-shadow-color: #ccc;
  --h2-color: #777;
  --footer-color: #777;
  --footer-text-shadow-color: #ccc;
  --border-bottom-color: rgb(108, 108, 108);
  --container-border-color: rgb(108, 108, 108);
  --box-border-color: rgb(108, 108, 108);
}

HTML {
  background-color: #00529f84;
  background-image: url("backgroundimage.jpg");
  background-size: 100% 100%;
  font-size: 20px;
  font-family: "Roboto", "Open Sans", sans-serif;
}

BODY{
  /*body has a default margin of 8px*/
  margin: 0;
}

H1 {
  font-family: Georgia, serif;
  font-style: italic;
  font-size: 2em;
  line-height: 1.4;
  color: var(--h2-color);
  text-shadow: 1px 1px 0 white, 2px 2px 0 var(--h1-text-shadow-color);
  text-align: center;
  margin-top: 50px;
  line-height: 2em;
  padding-bottom: 1rem;
  border-bottom: 1px solid var(--border-bottom-color);
}

FOOTER {
  /* to center box with reduced width, use margin: auto*/
  width: 80%;
  margin: 8rem auto;
  margin-bottom: 14rem;
  text-align: right;
  /* Font 
      - familiy/style/size
      - line-height: 1.4; == 1.4em, 1.4rem, 140%
      - color
      - text shadow
  */
  font-family: Georgia, serif;
  font-size: 1.5em;
  line-height: 1.4;
  color: var(--footer-color);
  text-shadow: 1px 1px 0 white, 2px 2px 0 var(--footer-text-shadow-color);
}

/*
  CONTENT
*/

.container {
  min-width: 300px;
  max-width: 700px;
  margin: 50px auto;
  border: 5px solid black;
  padding: 0 20px 20px 20px;
  background-color: #b8a95b8b;
}

/*1. Simple flex example*/

.wrapper-flex {
  display: flex;
  height: 50px;
}

.box-flex {
  margin-left: 10px;
  margin-right: 10px;
  background-color: aquamarine;
  min-width: 60px;
  flex: 1;
  text-align: center;
  line-height: 50px;
}

/*2. Simple grid example*/

.wrapper-grid {
  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  grid-template-rows: 100px 100px;
  gap: 10px;
}

.box-grid {
  margin-left: 10px;
  margin-right: 10px;
  min-width: 60px;
  text-align: center;
  line-height: 80px;
}

.box-grid-a {
  background-color: rgb(127, 238, 255);
}

/*3. Another simple grid example*/

.box-grid-b {
  background-color: rgb(127, 187, 255);
}

.box1-grid-b {
  grid-column: 2 / 4;
  grid-row: 1;
}

.box2-grid-b {
  grid-column: 1;
  grid-row: 1 / 3;
}

.box3-grid-b {
  grid-row: 2;
  grid-column: 3;
}

/*4. Simple float example*/

.box-float {
  float: left;
  width: 150px;
  height: 150px;
  margin-right: 30px;
  margin-left: 10px;
  text-align: center;
  line-height: 80px;
}

.box-float-a {
  background-color: rgb(180, 127, 255);
}

/*5. Simple positioning example*/

.positioning p,
.positioning div {
  background-color: rgb(207, 232, 220);
  border: 2px solid rgb(79, 185, 227);
  padding: 10px;
  margin: 10px;
  border-radius: 5px;
}

/*
  6. Relative positioning example
    override .positioning p with 
      - p.positioned-relative 
      - positioned-relative is not enough

*/

p.positioned-relative {
  position: relative;
  background-color: rgb(189, 250, 154);
  top: 30px;
  left: 30px;
}

/*
  7. Absolute positioning example
      - element with position:absolute get positioned to 
        the first ancestor without position:static
*/
.positioning {
  position: relative;
}

p.positioned-absolute {
  position: absolute;
  background-color: rgb(189, 250, 154);
  top: -50px;
  right: -70px;
  z-index: -1;
}

/*
  8. Fixed positioning example
    override .positioning p with 
      - positioned-relative ... !important 
      - or p.positioned-relative
      - positioned-relative is not enough
*/
.positioned-fixed {
  position: fixed;
  background-color: rgb(189, 250, 154) !important;
  bottom:100px;
  left: 30px;
}

/* 9. Sticky positioning example */
div.positioned-sticky {
  position: sticky;
  background-color: rgb(189, 250, 154);
  height: 90px;
  top: 30px;
  left: 30px;
}

div.center-sticky{
  /*horizontal*/
  text-align: center;
  /*vertical, 
    - with display:grid or display:flex
    - with align-content:center or align-items:center
   */
  display: grid;
  align-content: center;
}

/*
  11. Multi-column Layout
    use one of the two properties
      - column-width: 200px; 
      - column-count: 3; 
*/

div.positioning.column-container{
  column-count: 3;
}

/*
  HEADER
  https://www.tutorialspoint.com/how-to-place-text-over-an-image-with-html-and-css
  Header-Image
  https://latsonprint.com/contact/attachment/design-header/
*/

.header-image-container {
  position: relative;
  text-align: center;
  color: rgb(64, 11, 124);
}

.header-image-caption{
  font-size: 25px;
  font-weight: bolder;
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

.header-image-center {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

@media all and (max-width: 860px){
  .header-image-caption{
    font-size: 20px;
  }
}

@media all and (max-width: 500px){
  .header-image-caption{
    font-size: 15px;
  }
}

@media all and (max-width: 300px){
  .header-image-caption{
    font-size: 10px;
  }
}


/* 
  NAVIGATION
  nav is the container for the menu
*/

nav {
  background: #222;
  padding: 0 15px;
  z-index: 100;
}

a {
  color: white;
  text-decoration: none;
}

.menu {
  list-style-type: none;
}

.logo {
  font-size: 20px;
  padding: 7.5px 10px 7.5px 0;
}

.item {
  padding: 10px;
}

.item a:hover,
.item a:hover::after {
  color: rgb(211, 15, 15);
  background-color: rgb(56, 56, 56);
}

.active .item {
  display: block;
}

/*
  Sicky Navigation
    - only works with top and e.g. left set
    - add .sticky to nav tag (can also be done with js)
    - also works without .sticky, if the three properties are placed into nav tag
*/

nav.sticky {
  position: sticky;
  top: 0;
  left:0;
}


/*
  MOBILE MENU
    (mobile first approach)
    (@media all and (min-width: 700px) for bigger screens)
*/

/* 
  .menu is the flexbox wrapper 
*/
.menu {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  align-items: center;
}

/*  inside .menu inside li-tag the a-tag  */
.menu li a {
  display: block;
  padding: 15px 5px;
}

.toggle {
  order: 1;
  font-size: 20px;
}

/* 
  all other .item
      - even though it comes after, this rule does not override the more specific above
*/
.item {
  order: 3;
  width: 100%;
  text-align: center;
  display: none;
}

/*
  TABLET SCREENS
      (min-width 700)
*/

@media all and (min-width: 700px) {

  .menu {
    justify-content: center;
  }

  .logo {
    flex: 1;
  }

  .toggle {
    flex: 1;
    text-align: right;
    order: 2;
  }

}

/*
  DESKTOP SCREENS
      (min-width 960)
*/

@media all and (min-width: 960px) {
  .menu {
    align-items: flex-start;
    flex-wrap: nowrap;
    background: none;
  }

  .logo {
    order: 0;
  }

  .item {
    order: 1;
    position: relative;
    display: block;
    width: auto;
  }

  .toggle {
    display: none;
  }

}