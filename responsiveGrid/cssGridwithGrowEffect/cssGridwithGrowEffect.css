/*
    Source 
        https://blog.fullstackdigital.com/how-to-create-a-flawless-responsive-post-grid-with-flexbox-e5c7cc9d28e

    Cross-browser support
        The CSS in this tutorial doesn’t cover all of the vendor prefixes required when using flexbox. 
        If you’re using a build tool, make sure you use PostCSS with autoprefixer to automatically add 
        all the required vendor prefixes. 
        You can also generate these vendor prefixes by pasting your CSS into an autoprefixer tool 
        like this one:
        - https://autoprefixer.github.io/
    Help on a css-property
        - https://developer.mozilla.org/en-US/docs/Web/CSS/css-property
*/


/* font could also be imported in html head*/
@import url("https://fonts.googleapis.com/css?family=Roboto:400,700");


/*
    Units 
        - Generally, 1em = 1rem = 12pt = 16px = 100%. 
    font-size
        - As long as you use body font-size in % you can use em and % further down.
        - Preferred body font-size in % and then use em for everything enclosed in it.
        - Pixels are now considered acceptable font size units 
          (users can use the browser’s “zoom” feature to read smaller text), 
          although they are starting to cause some issues as a result of mobile devices 
          with very high density screens (some Android and iPhone devices have upwards 
          of 200 to 300 pixels per inch, making your 11- and 12-pixel fonts very difficult to see!).
          https://kyleschaeffer.com/css-font-size-em-vs-px-vs-pt-vs-percent
        - medium = 1em = 1rem = 12pt = 16px = 100%
        - beware of the compounding problem of em, which are removed with rem.
          em multiplies the values of the parent box, and the parent box of the grandparent box, etc.
          https://developer.mozilla.org/en-US/docs/Web/CSS/font-size
    font-weight
        - boldness of characters
    line-height
        - Sets the height of a line box.
        - Default is normal=18px=112%=1.12em (same as 1.12)
        - Use a minimum value of 1.5 for line-height for main paragraph content. 
          This will help people experiencing low vision conditions, 
          as well as people with cognitive concerns such as Dyslexia.
          https://developer.mozilla.org/en-US/docs/Web/CSS/line-height
*/
body {
    color: #000;
    font-family: "Roboto", sans-serif;
    font-size: 110%; /*do not use 18px;*/
    font-weight: 400; /*boldness of characters*/
    line-height: 1.6; /*use at least 1.5em; normal=18px=112%=1.12=1.12em*/
}


/*
    WRAPPING ELEMENTS
*/

/* .container (root box; sets max-width and margin)
    max-width
        - Sets the total max-width. 
        - Difference between max-width, min-width, width
          https://dev.to/ziizium/the-difference-between-css-width-min-width-and-max-width-property-49ah
          - width: fixed width
          - max-width: zero to max-width
            used for desktop first approach
            used for images, to never excee parent container
          - min-width: min-width to infinity
            used with mobile first approach
    margin
        - Top and bottom 0 margin, horizontally auto, which makes container box centered.
    My screen, my resolution
        - https://whatsmyscreensize.com/
        - physical resolution in px (actual number of physical pixels in screen)
            - width = 1920 
            - height = 1080
        - device pixel ratio = 1.5 (because 50% more physical pixels are packed into an inch of length, than it used to be the normal case)
        - logical resolution in px (what css thinks is the number of pixels)
            - width = 1280 (1920/1.5)
            - height = 720 (1080/1.5)
        - Browser viewport
            - media query for this device (in full screen mode)
              @media screen (min-width: 1280px) { }
    Device Pixel Ratio
        - https://stackoverflow.com/questions/8785643/what-exactly-is-device-pixel-ratio
        - device pixel ratio == CSS pixel ratio
        - it  is what determines how a device's screen resolution is interpreted by the CSS.
        - logical resolution = physical resolution
        - When viewing a web page, the CSS will think the device has a 1280x720 resolution screen 
          and Media Queries will respond as if the screen is 1280x720. 
          But the rendered elements on the screen will be 1.5 as sharp as in an actual 1280x720 screen, 
          because there are 1.5 as many physical pixels, namely 1920x1080, in the physical screen.
        - The reason that CSS pixel ratio was created is because as phones screens get higher resolutions, if every device still had a CSS pixel ratio of 1 then webpages would render too small to see.
          A typical full screen desktop monitor is a roughly 24" at 1920x1080 resolution. Imagine if that monitor was shrunk down to about 5" but had the same resolution. Viewing things on the screen would be impossible because they would be so small. But manufactures are coming out with 1920x1080 resolution phone screens consistently now.
          So the device pixel ratio was invented by phone makers so that they could continue to push the resolution, sharpness and quality of phone screens, without making elements on the screen too small to see or read.
*/
.container {
    max-width: 1335px;
    margin: 0 auto;
}

/* .grid-row (.container's child box; set row and flow behaviour.)
    display
        - Using display: flex; our grid-row stretches to the full size of the container.
    flex-flow
        We use flex-flow: wrap; to designate that child divs (our columns/grid-items) should wrap 
                                if they exceed the width of the row. 
        Then, flex-flow: row; means our grid-items will flex from left to right. 
                              If we used flex-flow: column, our child divs would flex from top down.
    justify-content
        We use justify-content: flex-start; because we want our grid-items to line up next to 
                                            each-other at the start of the row.
*/
.grid-row {
    display: flex;
    flex-flow: row wrap;
    justify-content: flex-start;
}


/*
    ITEMS
*/

/*.grid-item (.container's grandchild box)
    height
        - in pixels
    flex-basis
        - On desktop views (@media(min-width: 1334px)), we set a flex-basis of 20% for each grid-item. 
          This means that 5 grid-items will display on the same level. 
          The 6th grid-item will wrap to the next “row” since we are using flex-wrap: wrap in our grid-row.
    flex, -ms-flex
        - Sets how a flex item will grow or shrink to fit the space available in its flex container.
        - https://developer.mozilla.org/en-US/docs/Web/CSS/flex
        - auto
            - The item is sized according to its width and height properties, but grows to absorb any extra free space in the flex container, 
              and shrinks to its minimum size to fit the container. This is equivalent to setting "flex: 1 1 auto".
        - none
            - The item is sized according to its width and height properties. It is fully inflexible: 
              it neither shrinks nor grows in relation  to the flex container. 
              This is equivalent to setting "flex: 0 0 auto".
    width
        - We set a width of 259px for certain browsers that require a width to be defined. 
          However, the actual width is set by flex-basis.
    box-sizing
        - content-box or border-box
        - https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing
*/
.grid-item {
    height: 550px;
    flex-basis: 20%; /* item size, determines number of items in a row */
    -ms-flex: auto; /*equivalent to :1 1 auto;*/
    flex: none; /* equivalent to :0 0 auto; added because VSCode complained about -ms-flex without flex*/
    width: 259px; /* ignored, but in some Browsers needed*/
    position: relative;
    padding: 10px;
    box-sizing: border-box;
}

/* @MEDIA (resultion dependent rules)
    - We only need a few media queries on our .grid-item. 
        - We just need to define the flex-basis on each desired screen-width.
    - max-width=1335px
        flex-basis=20%
         - shows 5 items per row (for screens which can reach this width.)
    - max-width=1333px
        flex-basis=25%
        - shows 4 items per row (like for my maximal screen width at logical resolution of 1280px)
    - max-width=1073px
        flex-basis=33.33%
        - shows 3 items per row
    - max-width=815px
        flex-basis=50%
        - shows 2 items per row
    - max-width=555px
        flex-basis=100%
        - shows 1 item per row
    - https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries
*/
@media(max-width: 1333px) {
    .grid-item {
        flex-basis: 25%; /*33.33%;*/
    }
}

@media(max-width: 1073px) {
    .grid-item {
        flex-basis: 33.33%;
    }
}

@media(max-width: 815px) {
    .grid-item {
        flex-basis: 50%;
    }
}

@media(max-width: 555px) {
    .grid-item {
        flex-basis: 100%;
    }
}

/*
    mobile first
*/
/*  
.grid-item {
    height: 550px;
    flex-basis: 100%;
    -ms-flex: auto;
    width: 259px;
    position: relative;
    padding: 10px;
    box-sizing: border-box;

  }@media(min-width: 1073px) {
    .grid-item {
      flex-basis: 33.33%;
    }
  }@media(min-width: 815px) {
    .grid-item {
      flex-basis: 50%;
    }
  }
*/


/*
    ITEM LINKS
*/

/* a (.item's child box)
    text-decoration
        - Sets the appearance of decorative lines on text.
            - https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration
        - Set to :none; means, we do not want the link to be decorated. 
          Which probably isn't anyway, because it is not visible.
*/
.grid-row a {
    text-decoration: none;
}

/* .wrapping-link (.item's child box )
    position
        - Sets how an element is positioned in a document. 
          The top, right, bottom, and left properties determine the final location of positioned elements.
        - https://developer.mozilla.org/en-US/docs/Web/CSS/position
        - Set to default :static;
            The element is positioned according to the normal flow of the document.
            top, left bottom right z-index have no effect
        - Set to :relative;
            The element is positioned according to the normal flow of the document, 
            and then offset relative to itself based on the values of top, right, bottom, and left. 
        - Set to :absolute;
            The element is removed from the normal document flow, 
            and no space is created for the element in the page layout. 
            It is positioned relative to its closest positioned ancestor, if any; 
            otherwise, it is placed relative to the initial containing block. 
            Its final position is determined by the values of top, right, bottom, and left.
            This value creates a new stacking context when the value of z-index is not auto. 
            The margins of absolutely positioned boxes do not collapse with other margins.
            - it is set to ancestor .item 
            - setting all four values makes it span the whole area of .item

        - Set to :fixed;
            Fixed positioning is similar to absolute positioning, with the exception...
            This can be used to create a "floating" element that stays in the same position 
            regardless of scrolling. 
        - Set to :sticky;
            The element will scroll along with its container, 
            until it is at the top of the container (or reaches the offset specified in top), 
            and will then stop scrolling, so it stays visible.
            - A common use for sticky positioning is for the headings in an alphabetized list.
     z-index
        - Sets the z-order of a positioned element and its descendants or flex items. 
          Overlapping elements with a larger z-index cover those with a smaller one.
*/
.wrapping-link {
    position: absolute;
    top: 0;
    left: 0;
    bottom: 0;
    right: 0;
    z-index: 2;
    color: currentColor;
}

/*
    ITEM WRAPPER AND CONTAINER
*/

/* .grid-item-wrapper (.item's child box )
    transition
        - Transitions enable you to define the transition between two states of an element. 
          Different states may be defined using pseudo-classes 
          like :hover or :active or dynamically set using JavaScript.
*/
.grid-item-wrapper {
    -webkit-box-sizing: initial;
    -moz-box-sizing: initial;
    box-sizing: initial;
    background: #ececec;
    margin: 0;
    height: 100%;
    width: 100%;
    overflow: hidden;
    -webkit-transition: padding 0.15s cubic-bezier(0.4, 0, 0.2, 1), margin 0.15s cubic-bezier(0.4, 0, 0.2, 1), box-shadow 0.15s cubic-bezier(0.4, 0, 0.2, 1);
    transition: padding 0.15s cubic-bezier(0.4, 0, 0.2, 1), margin 0.15s cubic-bezier(0.4, 0, 0.2, 1), box-shadow 0.15s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
}

/* .grid-item:hover .grid-item-wrapper
    Effekt on hover
*/
.grid-item:hover .grid-item-wrapper {
    padding: 2% 2%;
    margin: -2% -2%;
}

/* .grid-item-container (.item's grandchild box )

*/
.grid-item-container {
    height: 100%;
    width: 100%;
    position: relative;
}

/*
    IMAGE
*/

/* .grid-image-top (.item's grandgrandchild box)

*/
.grid-image-top {
    height: 45%;
    width: 120%;
    background-size: cover;
    position: relative;
    background-position: 50% 50%;
    left: -10.5%;
    top: -4.5%;
}

.grid-image-top .centered {
    text-align: center;
    transform: translate(-50%, -50%);
    background-size: contain;
    background-repeat: no-repeat;
    position: absolute;
    top: 54.5%;
    left: 50%;
    width: 60%;
    height: 60%;
    background-position: center;
}

/*
    IMAGE CONTENT
*/

.grid-image-top.rex-ray {
    background: -webkit-gradient(linear, left top, left bottom, from(#007DB8), to(#00447C));
    background: -webkit-linear-gradient(#007DB8, #00447C);
    background: -o-linear-gradient(#007DB8, #00447C);
    background: linear-gradient(#007DB8, #00447C);
}

.rex-ray-image {
    /*background-image: url(https://thecodeteam.com/wp-content/uploads/2017/08/Rex-Ray-icon-209x300.png);*/
    background-image: url(image1.jpg);
}

.grid-image-top.sputnik {
    background: -webkit-gradient(linear, left top, left bottom, from(#1AA9FB), to(#1785C4));
    background: -webkit-linear-gradient(#1AA9FB, #1785C4);
    background: -o-linear-gradient(#1AA9FB, #1785C4);
    background: linear-gradient(#1AA9FB, #1785C4);
}

.sputnik-image {
    /*background-image: url(https://thecodeteam.com/wp-content/uploads/2017/08/sputnik-1-300x257.png);*/
    background-image: url(image2.jpg);
}

.grid-image-top.edgex {
    background: -webkit-gradient(linear, left top, left bottom, from(#952f4c), to(#3e1a51));
    background: -webkit-linear-gradient(#952f4c, #3e1a51);
    background: -o-linear-gradient(#952f4c, #3e1a51);
    background: linear-gradient(#952f4c, #3e1a51);
}

.edgex-image {
    /*background-image: url(https://thecodeteam.com/wp-content/uploads/2017/08/edge-x-300x287.png);*/
    background-image: url(image3.jpg);
}

.grid-image-top.openswitch {
    background: -webkit-gradient(linear, left top, left bottom, from(#2db89a), to(#00793d));
    background: -webkit-linear-gradient(#2db89a, #00793d);
    background: -o-linear-gradient(#2db89a, #00793d);
    background: linear-gradient(#2db89a, #00793d);
}

.openswitch-image {
    /*background-image: url(https://thecodeteam.com/wp-content/uploads/2017/08/open-switch-300x207.png);*/
    background-image: url(image4.jpg);
}

.grid-image-top.scaleio {
    background: -webkit-gradient(linear, left top, left bottom, from(#2e96dd), to(#326de6));
    background: -webkit-linear-gradient(#2e96dd, #326de6);
    background: -o-linear-gradient(#2e96dd, #326de6);
    background: linear-gradient(#2e96dd, #326de6);
}

.scaleio-image {
    /*background-image: url(https://thecodeteam.com/wp-content/uploads/2017/08/K8s_ScaleIO_Color-white-thumb-221x300.png);*/
    background-image: url(image5.jpg);
}

.grid-image-top.csi {
    background: -webkit-gradient(linear, left top, left bottom, from(#464646), to(#000000));
    background: -webkit-linear-gradient(#464646, #000000);
    background: -o-linear-gradient(#464646, #000000);
    background: linear-gradient(#464646, #000000);
}

.csi-image {
    /*background-image: url(https://thecodeteam.com/wp-content/uploads/2017/08/csi-1-300x99.png);*/
    background-image: url(image6.jpg);
}

.grid-image-top.kubernetes {
    background: -webkit-gradient(linear, left top, left bottom, from(#09C1D1), to(#326DE6));
    background: -webkit-linear-gradient(#09C1D1, #326DE6);
    background: -o-linear-gradient(#09C1D1, #326DE6);
    background: linear-gradient(#09C1D1, #326DE6);
}

.kubernetes-image {
    /*background-image: url(https://thecodeteam.com/wp-content/uploads/2017/08/kubernetes-300x293.png);*/
    background-image: url(image7.jpg);
}

.grid-image-top.grpc {
    background: -webkit-gradient(linear, left top, left bottom, from(#0CC1C8), to(#2E838C));
    background: -webkit-linear-gradient(#0CC1C8, #2E838C);
    background: -o-linear-gradient(#0CC1C8, #2E838C);
    background: linear-gradient(#0CC1C8, #2E838C);
}

.grpc-image {
    /*background-image: url(https://thecodeteam.com/wp-content/uploads/2017/08/grpc-300x105.png);*/
    background-image: url(image8.jpg);
}

.grid-image-top.envoy {
    background: -webkit-gradient(linear, left top, left bottom, from(#290B54), to(#130229));
    background: -webkit-linear-gradient(#290B54, #130229);
    background: -o-linear-gradient(#290B54, #130229);
    background: linear-gradient(#290B54, #130229);
}

.envoy-image {
    /*background-image: url(https://thecodeteam.com/wp-content/uploads/2017/08/envoy_logo-5028052-300x91.png);*/
    background-image: url(image9.jpg);
}

.grid-image-top.istio {
    background: -webkit-gradient(linear, left top, left bottom, from(#4A73C0), to(#466BB0));
    background: -webkit-linear-gradient(#4A73C0, #466BB0);
    background: -o-linear-gradient(#4A73C0, #466BB0);
    background: linear-gradient(#4A73C0, #466BB0);
}

.istio-image {
    /*background-image: url(https://thecodeteam.com/wp-content/uploads/2017/08/istio-203x300.png);*/
    background-image: url(image10.jpg);
}

/*
    TEXT CONTENT
*/

/* .grid-item-content  (.item's grandgrandchild box)

*/
.grid-item-content {
    padding: 0 20px 20px 20px;
}

.item-title {
    font-size: 24px;
    line-height: 26px;
    font-weight: 700;
    margin-bottom: 18px;
    display: block;
}

.item-category {
    text-transform: uppercase;
    display: block;
    margin-bottom: 20px;
    font-size: 14px;
}

.item-excerpt {
    margin-bottom: 20px;
    display: block;
    font-size: 14px;
}

.more-info {
    position: absolute;
    bottom: 0;
    margin-bottom: 25px;
    padding-left: 0;
    transition-duration: .5s;
    font-size: 12px;
    display: flex;
}

.more-info i {
    padding-left: 5px;
    transition-duration: .5s;
}

.grid-item:hover .more-info i {
    padding-left: 20px;
    transition-duration: .5s;
}

.more-info i::before {
    font-size: 16px;
}
